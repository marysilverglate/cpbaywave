% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/repJLDetectChangePoint.R
\name{repJLDetectChangePoint}
\alias{repJLDetectChangePoint}
\title{Repeated JL Dimension Reduction}
\usage{
repJLDetectChangePoint(multiseries, reducedDim = 5, useGaussian = TRUE,
  setdetail, useBFIC = TRUE, numRepeat = 100, numKeep = 2, alpha = 0.05)
}
\arguments{
\item{reducedDim}{The dimension you want to project onto. Should be less than the dimension of the time series. Default is 10}

\item{useGaussian}{Set to TRUE if you want to use a random Gaussian projection. Default is random matrix of +- 1.}

\item{setdetail}{Optional argument to set the detail level you wish to use. Default is all details.}

\item{useBFIC}{Optional argument to use BFIC to decide change point location.}

\item{numRepeat}{Number of times to repeat random projection. Default is 100.}

\item{multiSeries}{The high dimensional time series. Should be a matrix, with each row being an observation of the time series.}
}
\description{
Computes a random projection with Bernoulli entries of each element in a time series, then calls detectChangePoint to determine where the
change point occurs. In most cases of real data, the BFIC will be significantly greater than 3; it is an open
question to determine good values of the BFIC for various types of problems.
}
\examples{
\dontrun{

data(lennon) #Requires EMD package
lennon_ts <- matrix(as.vector(lennon) + rnorm(65536*120,0,1), nrow = 120, byrow = TRUE)
lennon_ts[80:128,7500:8000] <- lennon_ts[80:128,7500:8000] + 40
image(matrix(lennon_ts[1,], nrow = 256), col = gray(0:100/100))
image(matrix(lennon_ts[90,], nrow = 256), col = gray(0:100/100))
repJLDetectChangePoint(lennon_ts, numKeep = 3)

}

}
